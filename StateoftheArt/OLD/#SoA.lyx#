#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass thesis
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
State of the Art
\end_layout

\begin_layout Section
Optimisation
\end_layout

\begin_layout Subsection
Basic Concepts
\end_layout

\begin_layout Standard
Before starting to present the different categories of optimisation and
 some related existing methods, we would like to take some time defining
 what exactly optimisation is.
 In the more general way, optimizing is 
\emph on
trying to find the best element among an element set
\emph default
 (when finding this best element is not trivial, we can rightfully talk
 of 
\emph on
solving an optimisation problem).
 
\emph default
This somewhat simple definition implies in fact quite a lot.
\end_layout

\begin_layout Standard
First of all it implies we have a defined set of element to choose from.
 As we will see, the topology of the set is in fact of the utmost importance
 for solving the problem.
 This set of element is often named the 
\emph on
search space
\emph default
, 
\emph on
solution space
\emph default
 or 
\emph on
domain
\emph default
.
 In 
\begin_inset Quotes eld
\end_inset

simple
\begin_inset Quotes erd
\end_inset

 optimization problems, the search space can be simply defined by a set
 of elements (for example {a,b,c} or ‚Ñù) associated with a set of 
\emph on
constraints
\emph default
.
 For large problems, the search space can be defined by calculus-heavy equations
, empirical models, complex algorithms ...
 or even a mix of all of the above.
\end_layout

\begin_layout Standard
Since we want to find the best element of this solution space, we have to
 determine what make an element better than another.
 Usually, the possible solutions are compared through a specific function
 called the 
\emph on
objective function
\emph default
.
 Some alternate names are 
\emph on
criterion
\emph default
 or 
\emph on
cost function
\emph default
.
 The best element would be the one for which the objective function returns
 a minimal (or alternatively, maximal
\end_layout

\begin_layout Standard
\begin_inset Foot
status open

\begin_layout Plain Layout
Obviously we sometimes want to find the 
\emph on
maximal
\emph default
 value which is solution of a problem, however minimizing f(x) is equivalent
 to maximizing (-f(x)).
 So maximisation problems can be expressed as minimization problems, and
 vice-versa.
 Traditionnaly, optimisation problems are often expressed in the terms of
 finding a 
\emph on
minimal
\emph default
 value since the two possibilities are equivalents.
 
\end_layout

\end_inset

) value.
 It should be noted that it is possible for 
\end_layout

\begin_layout Standard
The least obvious keyword here is 
\emph on
try
\emph default
.
 When the search space is very large, or its topology is complicated, it
 can be really long or difficult to find the best solution and, more important,
 to be sure that the solution is the best.
 In fact, in these problems, the only way to find the best solution with
 certainty is an exhaustive exploration of the search space.
 Since it can be very costly in terms of time and calculation, instead of
 finding the best solution, we settle for a solution which is 
\begin_inset Quotes eld
\end_inset

good enough
\begin_inset Quotes erd
\end_inset

, for example because this solution is the best for a subpart of the search
 space.
 The best solution is called the 
\emph on
global optimum
\emph default
, while a 
\begin_inset Quotes eld
\end_inset

good enough
\begin_inset Quotes erd
\end_inset

 solution is called a 
\emph on
local optimum
\emph default
.
 In a similar fashion, methods which try to find the global solution are
 said to be 
\emph on
global optimisation methods
\emph default
, where methods which search for local optimum are said to be 
\emph on
local optimisation methods
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figs/searchSpace.pdf
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Examples of local and global optimums.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "Flo:localAndGlobalOptims"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In 
\begin_inset CommandInset ref
LatexCommand ref
reference "Flo:localAndGlobalOptims"

\end_inset

, we can see different examples of global and local optimums.
 The points labeled 
\emph on
a
\emph default
 and 
\emph on
b
\emph default
 are both global maximums, as they have the same value.
 The points 
\emph on
c 
\emph default
and 
\emph on
d
\emph default
 are respectively local minimum and maximum, while 
\emph on
e
\emph default
 is the global minimum.
\end_layout

\begin_layout Standard
A formal definition of the most simple and generic optimization problem
 would be:
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
min\, f(x)\, s.t.\,(x\in X)\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Where 
\emph on
X
\emph default
 is our search space and 
\emph on
f(x)
\emph default
 the objective function we want to minimize.
 
\end_layout

\begin_layout Subsection
No Free Lunch Theorem
\end_layout

\end_body
\end_document
